#  Qudi configuration file for the new core.
#

global:
    # list of modules to load when starting
    startup: []

    # Module server configuration for accessing qudi GUI/logic/hardware modules from remote clients
    remote_modules_server:
        address: 'localhost'
        port: 12345

    # Server port for serving the active qudi module namespace locally (localhost).
    # Used by e.g. the Qudi jupyter kernel.
    namespace_server_port: 18861


    # If this flag is set (True), all arguments passed to qudi module APIs from remote
    # (jupyter notebook, qudi console, remote modules) will be wrapped and passed "per value"
    # (serialized and de-serialized). This is avoiding a lot of inconveniences with using numpy in
    # remote clients.
    # If you do not want to use this workaround and know what you are doing, you can disable this
    # feature by setting this flag to False.
    force_remote_calls_by_value: True

    # Qss stylesheet for controlling the appearance of the GUIs.
    # Absolute path or relative to qudi.artwork.styles
    stylesheet: 'qdark.qss'


    # Default root directory for measurement data storage. All eventual data sub-directories should
    # be contained within this directory. This is not enforced, just convention.
    # The fallback directory is <user home>/qudi/Data/
    default_data_dir: 'C:\\Data'

    # Save data to daily data sub-directories by default
    daily_data_dirs: True

hardware:
    camera_dummy:
        module.Class: 'dummy.camera_dummy.CameraDummy'
        support_live: True
        camera_name: 'Dummy camera'
        resolution: (1280, 720)
        exposure: 0.1
        gain: 1.0

    instream_dummy:
        module.Class: 'dummy.data_instream_dummy.InStreamDummy'
        digital_channels:  # optional, must provide at least one digital or analog channel
            - 'digital 1'
            - 'digital 2'
            - 'digital 3'
        analog_channels:  # optional, must provide at least one digital or analog channel
            - 'analog 1'
            - 'analog 2'
        digital_event_rates:  # optional, must have as many entries as digital_channels or just one
            - 1000
            - 10000
            - 100000
        # digital_event_rates: 100000
        analog_amplitudes:  # optional, must have as many entries as analog_channels or just one
            - 5
            - 10
        # analog_amplitudes: 10  # optional (10V by default)

    interface_test_hardware_first:
        module.Class: 'interface_test_hardware.TestHardware'

    interface_test_hardware_second:
        module.Class: 'interface_test_hardware.TestHardware'

    fastcounter_dummy:
        module.Class: 'dummy.fast_counter_dummy.FastCounterDummy'
        gated: False
        #load_trace: None # path to the saved dummy trace

    finite_sampling_input_dummy:
        module.Class: 'dummy.finite_sampling_input_dummy.FiniteSamplingInputDummy'

    finite_sampling_io_dummy:
        module.Class: 'dummy.finite_sampling_io_dummy.FiniteSamplingIODummy'

    finite_sampling_output_dummy:
        module.Class: 'dummy.finite_sampling_output_dummy.FiniteSamplingOutputDummy'

    microwave_dummy:
        module.Class: 'dummy.microwave_dummy.MicrowaveDummy'

    motor_dummy:
        module.Class: 'dummy.motor_dummy.MotorDummy'

    process_control_dummy:
        module.Class: 'dummy.process_control_dummy.ProcessControlDummy'
        process_value_channels:
            Temperature:
                unit: 'K'
                limits: [0, .inf]
                dtype: float
            Voltage:
                unit: 'V'
                limits: [-10.0, 10.0]
                dtype: float
        setpoint_channels:
            Power:
                unit: 'dBm'
                limits: [-120.0, 30.0]
                dtype: float
            Frequency:
                unit: 'Hz'
                limits: [100.0e3, 20.0e9]
                dtype: float

    pulser_dummy:
        module.Class: 'dummy.pulser_dummy.PulserDummy'

    scanning_probe_dummy:
        module.Class: 'dummy.scanning_probe_dummy.ScanningProbeDummy'
        spot_density: 4e6           # in 1/mÂ², optional
        position_ranges:
            x: [0, 200e-6]
            y: [0, 200e-6]
            z: [-100e-6, 100e-6]
        frequency_ranges:
            x: [1, 5000]
            y: [1, 5000]
            z: [1, 1000]
        resolution_ranges:
            x: [1, 10000]
            y: [1, 10000]
            z: [2, 1000]
        position_accuracy:
            x: 10e-9
            y: 10e-9
            z: 50e-9

    laser_dummy:
        module.Class: 'dummy.simple_laser_dummy.SimpleLaserDummy'

    spectrometer_dummy:
        module.Class: 'dummy.spectrometer_dummy.SpectrometerDummy'

    switch_dummy:
        module.Class: 'dummy.switch_dummy.SwitchDummy'
        name: 'First'  # optional
        remember_states: True  # optional
        switches:
            one: ['down', 'up']
            two: ['down', 'up']
            three: ['low', 'middle', 'high']

    wavemeter_dummy:
        module.Class: 'dummy.wavemeter_dummy.WavemeterDummy'
        measurement_timing: 10.0


logic:
    camera_logic:
        module.Class: 'camera_logic.CameraLogic'
        connect:
            camera: 'camera_dummy'
        minimum_exposure_time: 0.05

    interface_test_logic:
        module.Class: 'interface_test_logic.InterfaceTestLogic'
        connect:
            first_hardware: 'interface_test_hardware_first'
            second_hardware: 'interface_test_hardware_second'

    laser_logic:
        module.Class: 'laser_logic.LaserLogic'
        connect:
            laser: 'laser_dummy'

    laser_scanner_logic:
        module.Class: 'laser_scanner_logic.LaserScannerLogic'
        connect:
            confocalscanner1: 'scanning_logic'
            savelogic: 'savelogic'


    nv_calculator_logic:
        module.Class: 'nv_calculator_logic.NVCalculatorLogic'
        connect:
            odmr: 'odmr_logic' #optional
            pulsed: 'pulsed_measurement_logic' #optional

    odmr_logic:
        module.Class: 'odmr_logic.OdmrLogic'
        connect:
            microwave: 'mw_source_agilent'
            data_scanner: 'ni_finite_sampling_input'
        save_thumbnails: True
        default_scan_mode: 'JUMP_LIST'

    odmr_logic_dummy:
        module.Class: 'odmr_logic.OdmrLogic'
        connect:
            microwave: 'microwave_dummy'
            data_scanner: 'finite_sampling_input_dummy'
        save_thumbnails: True
        default_scan_mode: 'JUMP_LIST'

    pid_logic:
        module.Class: 'pid_logic.PIDLogic'
        timestep: 0.1
        connect:
            controller: 'softpid_logic'
            savelogic: 'savelogic'

    softpid_logic:
        module.Class: 'software_pid_controller.SoftPIDController'
        connect:
            process: 'process_control_dummy'
            control: 'process_control_dummy'

    qdplotlogic:
        module.Class: 'qdplot_logic.QDPlotLogic'
        default_plot_number: 3


    scanning_data_logic:
        module.Class: 'scanning_data_logic.ScanningDataLogic'
        connect:
            scan_logic: 'scanning_probe_logic'
        max_history_length: 10

    scanning_optimize_logic:
        module.Class: 'scanning_optimize_logic.ScanningOptimizeLogic'
        connect:
            scan_logic: 'scanning_probe_logic'
        min_poll_interval: 0.5

    scanning_probe_logic:
        module.Class: 'scanning_probe_logic.ScanningProbeLogic'
        connect:
            scanner: 'scanning_probe_dummy'
        max_history_length: 10


    spectrometer_logic:
        module.Class: 'spectrometer_logic.SpectrometerLogic'
        connect:
            spectrometer: 'spectrometer_dummy'

    switch_logic:
        module.Class: 'switch_logic.SwitchLogic'
        watchdog_interval: 1  # optional
        autostart_watchdog: True  # optional
        connect:
            switch: 'switch_dummy'

    time_series_reader_logic:
        module.Class: 'time_series_reader_logic.TimeSeriesReaderLogic'
        max_frame_rate: 10  # optional (10Hz by default)
        calc_digital_freq: True  # optional (True by default)
        connect:
            streamer: 'instream_dummy'

    taskrunner_logic:
        module.Class: 'taskrunner.TaskRunnerLogic'
        module_tasks:
            the_task:
                module.Class: 'qudi.tasks.test_tasks.TestTask'
                connect:
                    derp: 'testlogic'
            the_other_task:
                module.Class: 'qudi.tasks.test_tasks.TestTask2'
                connect:
                    derp: 'testlogic'
            the_other_task2:
                module.Class: 'qudi.tasks.test_tasks.TestTask2'
                connect:
                    derp: 'testlogic'
            the_other_task3:
                module.Class: 'qudi.tasks.test_tasks.TestTask2'
                connect:
                    derp: 'testlogic'
            the_other_task4:
                module.Class: 'qudi.tasks.test_tasks.TestTask2'
                connect:
                    derp: 'testlogic'
            the_other_task5:
                module.Class: 'qudi.tasks.test_tasks.TestTask2'
                connect:
                    derp: 'testlogic'
            the_other_task6:
                module.Class: 'qudi.tasks.test_tasks.TestTask2'
                connect:
                    derp: 'testlogic'

    wavemeter_logger_logic:
        module.Class: 'scanning_probe_logic.ScanningProbeLogic'
        connect:
            wavemeter: 'spectrometer_dummy'
            counterlogic: 'counterlogic'
            savelogic: 'savelogic'
            fitlogic: 'fitlogic'
        logic_acquisition_timing: 20.0
        logic_update_timing: 100.0


gui:
    camera:
        module.Class: 'camera.cameragui.CameraGui'
        connect:
            camera_logic: 'camera_logic'

    laser:
        module.Class: 'laser.laser_gui.LaserGui'
        connect:
            laser_logic: 'laser_logic'

    laser_scanner:
        module.Class: 'laserscanner.laserscannergui.VoltScanGui'
        connect:
            voltagescannerlogic1: 'laser_scanner_logic'
            savelogic: 'savelogic'

    nv_calculator:
        module.Class: 'nv_calculator.nv_calculatorgui.NVCalculatorGui'
        connect:
            nv_calculatorlogic: 'nv_calculator_logic'
    odmr:
        module.Class: 'odmr.odmrgui.OdmrGui'
        connect:
            odmr_logic: 'odmr_logic'
        max_shown_scans: 50

    pidcontrol:
        module.Class: 'pidgui.pidgui.PIDGui'
        connect:
            pidlogic: 'pid_logic'

    poimanager:
        module.Class: 'poimanager.poimangui.PoiManagerGui'
        connect:
            poimanagerlogic: 'poimanager_logic'
            scannerlogic: 'scanner_logic'

    pulsedmeasurement:
        module.Class: 'pulsed.pulsed_maingui.PulsedMeasurementGui'
        connect:
            pulsedmasterlogic: 'pulsed_master_logic'

    qdplotter:
        module.Class: 'qdplot.qdplot_gui.QDPlotterGui'
        pen_color_list: [[235,130,39], #orange
                         [97,161,74],  #green
                         [217,94,200], #pink
                         [85,151,206], #blue
                         [216,34,41], #red
                         [210, 203, 15], #yellow
                         [153,153,153] #grey
                         ]
        connect:
            qdplot_logic: 'qdplot_logic'

    confocalscanner:
        module.Class: 'scanning.scannergui.ScannerGui'
        connect:
            scanning_logic: 'scanning_logic'
            data_logic: 'scanning_data_logic'
            optimize_logic: 'optimize_logic'

    spectrometer:
        module.Class: 'spectrometer.spectrometer_gui.SpectrometerGui'
        connect:
            spectrometer_logic: 'spectrometer_logic'

    switches:
        module.Class: 'switch.switch_gui.SwitchGui'
        connect:
            switchlogic: 'switch_logic'

    taskrunner:
        module.Class: 'taskrunner.task_runner_gui.TaskRunnerGui'
        connect:
            task_runner: 'taskrunner_logic'

    timeseries:
        module.Class: 'time_series.time_series_gui.TimeSeriesGui'
        connect:
            _time_series_logic_con: 'time_series_reader_logic'
        use_antialias: True

    wavemeter_logger:
        module.Class: 'wavemeterlogger.wavemeterloggui.WavemeterLogGui'
        connect:
            wavemeterloggerlogic: 'wavemeter_logger_logic'
            savelogic: 'save_logic'
